from loader import dp, bot

from Filters import *
from States import *
from Database.users import *
from Database.attacks import *
from JsonParser.parser import *
from Modules.IPLookup.lookup import *
import Keyboards.main_kb as kb

from aiogram import Bot, types
from aiogram.dispatcher import FSMContext

import datetime


@dp.message_handler(IsWork(), IsPrivate(), commands=['start'])
async def process_start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await addUser(user_id)

    await message.answer(f'üöÄ <b>Welcome to KarmaAPI!</b>\n\n'
                         f'One of the leading DDoS tools with the best L4/L7 bypasses. Our bot is one of the best in terms of price and quality.\n\n'
                         f'üîΩ <b>Use keyboard to navigate</b>', reply_markup=await kb.start_kb())


@dp.message_handler(IsWork(), IsPrivate(), state=UserStates.attackState)
async def process_start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    await state.update_data(attackState=message.text)
    data = await state.get_data()
    user_input = data['attackState']

    args = user_input.split()

    if len(args) == 4:
        target = args[0]
        method = args[1]
        time = args[2]
        port = args[3]

        await startAttack(user_id, target, method, time, port, state)
        await state.finish()
    else:
        answ = (f'üìù <b>Not enough arguments to launch an attack.</b>\n'
                f"‚§∑ Usage: <code>[TARGET] [METHOD] [TIME] [PORT]</code>")
        await message.answer(answ, reply_markup=await kb.cancel_kb())


@dp.message_handler(IsWork(), IsPrivate(), content_types=types.ContentType.TEXT, text='üéØ Attacks')
async def handle_hello(message: types.Message):
    user_id = message.from_user.id
    await addUser(user_id)

    answ = (f'üìù <b>To launch the attack, enter the data:</b>\n'
            f"‚§∑ <code>[TARGET] [METHOD] [TIME] [PORT]</code>")
    await message.answer(answ, reply_markup=await kb.cancel_kb())

    await UserStates.attackState.set()


@dp.callback_query_handler(IsWork(), text="cancel", state='*')
async def scall(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer('‚úÖ <b>Operation canceled successfully!</b>')
    await state.finish()


@dp.message_handler(IsWork(), IsPrivate(), content_types=types.ContentType.TEXT, text='üë§ My Account')
async def handle_hello(message: types.Message):
    user_id = message.from_user.id
    await addUser(user_id)

    info = await getUserInfo(user_id)
    plan = info[2]
    expire = info[3]
    concs = info[4]
    maxtime = info[5]
    api = info[6]
    vip = info[7]

    if api == "True":
        api = '‚úÖ'
    else:
        api = '‚ùå'

    if vip == "True":
        vip = '‚úÖ'
    else:
        vip = '‚ùå'

    date_time = datetime.datetime.fromtimestamp(expire)
    now = datetime.datetime.now()
    delta = date_time - now
    days = delta.days

    if plan == "None":
        answ = (f'üë§ <b>My Account</b>\n\n'
                f'¬∑ ID: <code>{user_id}</code>\n\n'
                f'‚ùó <b>You dont have an active plan!</b>')
    else:
        answ = (f'üë§ <b>My Account</b>\n\n'
                f'¬∑ ID: <code>{user_id}</code>\n'
                f'¬∑ Plan: <b>{plan}</b>\n'
                f'¬∑ Expire: <b>{days}</b> days\n'
                f'¬∑ Concurrents: <b>{concs}</b>\n'
                f'¬∑ Maximum Time: <b>{maxtime}</b> sec.\n'
                f'¬∑ API Access: {api}\n'
                f'¬∑ VIP: {vip}\n\n'
                f'‚ÑπÔ∏è <b>You have an active plan.</b>')

    await message.answer(answ, reply_markup=await kb.links_kb())


@dp.message_handler(IsWork(), IsPrivate(), content_types=types.ContentType.TEXT, text='‚ö° Plans')
async def handle_hello(message: types.Message):
    user_id = message.from_user.id
    await addUser(user_id)

    plans = ''

    answ = (f'üõ°Ô∏è <b>Pricing plans:</b>\n\n'
            f'‚ñ∏ <b>Basic</b>:\n'
            f'Concurrent: <code>1</code>\n'
            f'MaxTime: <code>300 seconds</code>\n'
            f'VIP: <code>‚ùå</code>\n'
            f'API Access: <code>‚ùå</code>\n'
            f'Cost: <code>15$/Month</code>\n\n'
            
            f'‚ñ∏ <b>Standart</b>:\n'
            f'Concurrent: <code>2</code>\n'
            f'MaxTime: <code>600 seconds</code>\n'
            f'VIP: <code>‚ùå</code>\n'
            f'API Access: <code>‚ùå</code>\n'
            f'Cost: <code>35$/Month</code>\n\n'
            
            f'‚ñ∏ <b>Premium</b>:\n'
            f'Concurrent: <code>3</code>\n'
            f'MaxTime: <code>1200 seconds</code>\n'
            f'VIP: <code>‚ùå</code>\n'
            f'API Access: <code>‚úÖ</code>\n'
            f'Cost: <code>65$/Month</code>\n\n'
            
            f'‚ñ∏ <b>Master</b>:\n'
            f'Concurrent: <code>4</code>\n'
            f'MaxTime: <code>2000 seconds</code>\n'
            f'VIP: <code>‚úÖ</code>\n'
            f'API Access: <code>‚úÖ</code>\n'
            f'Cost: <code>120$/Month</code>\n\n'
            f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
            f'‚ÑπÔ∏è <b>For purchase ‚Äî {Config().Support}</b>')

    for plan in Config().Plans:
        vip_smiley = '‚úÖ' if plan['VIP'] else '‚ùå'
        api_smiley = '‚úÖ' if plan['API'] else '‚ùå'

        plans += f'‚ñ∏ <b>{plan["Name"]}</b>:\n'
        plans += f'Concurrent: <code>{plan["Concurrents"]}</code>\n'
        plans += f'MaxTime: <code>{plan["MaxTime"]} seconds</code>\n'
        plans += f'VIP: <code>{vip_smiley}</code>\n'
        plans += f'API Access: <code>{api_smiley}</code>\n'
        plans += f'Cost: <code>${plan["Cost"]}/Month</code>\n\n'

    answ1 = (f'üõ°Ô∏è <b>Pricing plans:</b>\n\n'
             f'{plans}'
             f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
             f'‚ÑπÔ∏è <b>For purchase ‚Äî {Config().Support}</b>')

    await message.answer(answ1)


@dp.message_handler(IsWork(), IsPrivate(), content_types=types.ContentType.TEXT, text='üìö Methods')
async def handle_hello(message: types.Message):
    user_id = message.from_user.id
    await addUser(user_id)

    answ = (f'üî∞ <b>Available methods:</b>\n\n'
            f'<b>üìà LAYER 7:</b>\n'
            f'~ <code>HTTP-FLOOD</code> ‚Äì Method is useful against regular webservers/low protected targets.\n'
            f'~ <code>HTTP-STORM</code> ‚Äì It sends a very stable stream of HTTP/2 requests per second and it can also bypass some JS challenges. <b>[VIP]</b>\n'
            f'~ <code>BROWSER</code> ‚Äì Emulates a real user, which allows you to bypass Captcha or JS challenges.\n\n'
            f'<b>üìâ LAYER 4:</b>\n'
            f'~ <code>UDP</code> - Sending a lot of UDP packets.\n'
            f'~ <code>TCP</code> - High PPS flood.\n'
            f'~ <code>OVH-TCP</code> ‚Äì TCP flood to bypass OVH.\n'
            f'~ <code>SOCKET</code> ‚Äì SOCKET flood.\n\n'
            f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
            f'‚ÑπÔ∏è <b>More methods will be coming soon.</b>')

    await message.answer(answ)


@dp.message_handler(IsWork(), IsPrivate(), content_types=types.ContentType.TEXT, text='üì¶ Tools')
async def handle_hello(message: types.Message):
    user_id = message.from_user.id
    await addUser(user_id)

    answ = (f'üîΩ <b>Select tool:</b>')
    await message.answer(answ, reply_markup=await kb.tools_kb())


@dp.callback_query_handler(IsWork(), text="lookup")
async def scall(call: types.CallbackQuery, state: FSMContext):

    answ = (f'üìù <b>Enter IP or domain...</b>')
    await call.message.answer(answ)
    await UserStates.lookupState.set()


@dp.message_handler(IsPrivate(), IsWork(), state=UserStates.lookupState)
async def handle_hello(message: types.Message, state: FSMContext):
    await state.update_data(lookupState=message.text)
    data = await state.get_data()
    user_input = data['lookupState']

    await message.answer('‚åõ')

    ipinfo = await iplookup(user_input)

    if ipinfo != False:
        answ = (f'üîç <b>Information about {user_input}</b>\n\n'
                f'¬∑ IP: <code>{ipinfo[0]}</code>\n'
                    f'¬∑ Name: <code>{ipinfo[1]}</code>\n'
                    f'¬∑ Organization: <code>{ipinfo[2]}</code>\n'
                    f'¬∑ Provider: <code>{ipinfo[3]}</code>\n'
                    f'¬∑ Country: <code>{ipinfo[4]}</code>\n'
                    f'¬∑ City: <code>{ipinfo[5]}</code>\n\n'
                    f'<i>Checked by module IP Lookup</i> üõ°Ô∏è')
    else:
        answ = (f'‚ùó <b>Could not find information about this resource.</b>')

    await message.answer(answ)
    await state.finish()

"""

–•—Ä–∏—Å—Ç–µ –ë–æ–∂–µ —Ä–∞—Å–ø–µ—Ç–∏ –∏ —Å–≤–µ—Ç–∏,
–°—Ä–ø—Å–∫–∞ –∑–µ–º—ô–∞ –∫—Ä–æ–∑ –æ–±–ª–∞–∫–µ –ª–µ—Ç–∏.
–õ–µ—Ç–∏ –ø—Ä–µ–∫–æ –Ω–µ–±–µ—Å–∫–∏—Ö –≤–∏—Å–∏–Ω–∞,
–ö—Ä–∏–ª–∞ —Å—É —ò–æ—ò –ú–æ—Ä–∞–≤–∞ –∏ –î—Ä–∏–Ω–∞.
 
–ó–±–æ–≥–æ–º –ø—Ä–≤–∏ –Ω–µ—Ä–æ—í–µ–Ω–∏ —Å–∏–Ω–µ,
–ó–±–æ–≥–æ–º —Ä—É–∂–æ, –∑–±–æ–≥–æ–º —Ä—É–∑–º–∞—Ä–∏–Ω–µ.
–ó–±–æ–≥–æ–º –ª–µ—Ç–æ, —ò–µ—Å–µ–Ω–∏ –∏ –∑–∏–º–æ,
–û–¥–ª–∞–∑–∏–º–æ –¥–∞ —Å–µ –Ω–µ –≤—Ä–∞—Ç–∏–º–æ.

–ù–∞ —Ç—Ä–∏ —Å–≤–µ—Ç–æ –∏ –Ω–∞ —Ç—Ä–∏ —Å–∞—Å—Ç–∞–≤–Ω–æ,
–û–¥–ª–∞–∑–∏–º–æ –Ω–∞ –ö–æ—Å–æ–≤–æ —Ä–∞–≤–Ω–æ.
–û–¥–ª–∞–∑–∏–º–æ –Ω–∞ —Å—É—í–µ–Ω–æ –º–µ—Å—Ç–æ
–ó–±–æ–≥–æ–º –º–∞—ò–∫–æ, —Å–µ—Å—Ç—Ä–æ –∏ –Ω–µ–≤–µ—Å—Ç–æ.
 
–ó–±–æ–≥–æ–º –ø—Ä–≤–∏ –Ω–µ—Ä–æ—í–µ–Ω–∏ —Å–∏–Ω–µ,
–ó–±–æ–≥–æ–º —Ä—É–∂–æ, –∑–±–æ–≥–æ–º —Ä—É–∑–º–∞—Ä–∏–Ω–µ.
–ó–±–æ–≥–æ–º –ª–µ—Ç–æ, —ò–µ—Å–µ–Ω–∏ –∏ –∑–∏–º–æ.
–û–¥–ª–∞–∑–∏–º–æ –¥–∞ —Å–µ –Ω–µ –≤—Ä–∞—Ç–∏–º–æ.

"""